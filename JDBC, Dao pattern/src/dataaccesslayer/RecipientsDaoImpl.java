/* File: DataSource.java
 * Author: Juho Lee
 * Date: 2023. 02. 08
 * Description: Printing Recipients using JDBC and Dao pattern.
 * References:
 * Ram N. (2013).  Data Access Object Design Pattern or DAO Pattern [blog] Retrieved from
 * http://ramj2ee.blogspot.in/2013/08/data-access-object-design-pattern-or.html
 */
package dataaccesslayer;

import java.util.List;

import transferobjects.RecipientsDTO;

import java.util.ArrayList;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;

public class RecipientsDaoImpl implements RecipientsDao{

                /**

        Retrieves all recipients from the database and returns them as a list of RecipientsDTO objects.
        The list is sorted by AwardID.
        @return The list of RecipientsDTO objects.
        */
        @Override
        public List<RecipientsDTO> getAllRecipients() {
        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        ArrayList<RecipientsDTO> recipients = null;
        try{
        DataSource ds = new DataSource();
        con = ds.createConnection();
        pstmt = con.prepareStatement(
        "SELECT AwardID, Name, Year, City, Category FROM Recipients ORDER BY AwardID");
        rs = pstmt.executeQuery();
        recipients = new ArrayList<RecipientsDTO>();
        System.out.println("AwardID, Name, Year, City, Category");
        while(rs.next()){
        RecipientsDTO recipient = new RecipientsDTO();
        recipient.setAwardID(rs.getInt("AwardID"));
        recipient.setName(rs.getString("Name"));
        recipient.setYear(rs.getInt("Year"));
        recipient.setCity(rs.getString("City"));
        recipient.setCategory(rs.getString("Category"));
        recipients.add(recipient);
        }
        }
        catch(SQLException e){
        e.printStackTrace();
        }
        finally{
        try{ if(rs != null){ rs.close(); } }
        catch(SQLException ex){System.out.println(ex.getMessage());}
        try{ if(pstmt != null){ pstmt.close(); }}
        catch(SQLException ex){System.out.println(ex.getMessage());}
        try{ if(con != null){ con.close(); }}
        catch(SQLException ex){System.out.println(ex.getMessage());}
        }
        return recipients;
        }

	@Override
	public RecipientsDTO getRecipientByAwardId(Integer awardID) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		RecipientsDTO recipient = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"SELECT AwardID, Name, Year, City, Category FROM Recipients WHERE AwardID = ?");
			pstmt.setInt(1, awardID.intValue());
			rs = pstmt.executeQuery();
                        System.out.println("AwardID, Name, Year, City, Category");
			while(rs.next()){
				recipient = new RecipientsDTO();
				recipient.setAwardID(rs.getInt("AwardID"));
				recipient.setName(rs.getString("Name"));
				recipient.setYear(rs.getInt("Year"));
                                recipient.setCity(rs.getString("City"));
                                recipient.setCategory(rs.getString("Category"));
                                
			}
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(rs != null){ rs.close(); } }
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
		return recipient;
	}

	@Override
	public void addRecipient(RecipientsDTO recipient) {
		Connection con = null;
		PreparedStatement pstmt = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			// do not insert AuthorID, it is generated by Database
			pstmt = con.prepareStatement(
					"INSERT INTO Recipients (Name, Year, City, Category) " +
			        "VALUES(?, ?, ?, ?)");
			pstmt.setString(1, recipient.getName());
			pstmt.setInt(2, recipient.getYear());
                        pstmt.setString(3, recipient.getCity());
                        pstmt.setString(4, recipient.getCategory());
			pstmt.executeUpdate();
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
	}

	@Override
	public void updateRecipient(RecipientsDTO recipient) {
			Connection con = null;
			PreparedStatement pstmt = null;
			try{
				DataSource ds = new DataSource();
				con = ds.createConnection();
				pstmt = con.prepareStatement(
						"UPDATE Recipients SET Name = ?, " + 
				        "Year = ?, "
                                        +"City = ?, "
                                        +"Category = ? WHERE AwardID = ?");
				pstmt.setString(1, recipient.getName());
				pstmt.setInt(2, recipient.getYear());
                                pstmt.setString(3, recipient.getCity());
                                pstmt.setString(4, recipient.getCategory());
				pstmt.setInt(5, recipient.getAwardID().intValue());
				pstmt.executeUpdate();
			}
			catch(SQLException e){
				e.printStackTrace();
			}
			finally{
				try{ if(pstmt != null){ pstmt.close(); }}
				catch(SQLException ex){System.out.println(ex.getMessage());}
				try{ if(con != null){ con.close(); }}
				catch(SQLException ex){System.out.println(ex.getMessage());}
			}
	}

	@Override
	public void deleteRecipient(RecipientsDTO recipient) {
		Connection con = null;
		PreparedStatement pstmt = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"DELETE FROM Recipients WHERE AwardID = ?");	
			pstmt.setInt(1, recipient.getAwardID().intValue());
			pstmt.executeUpdate();
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
	}
        @Override
        public void printColumAttributes(){
            Connection con = null;
            PreparedStatement pstmt = null;
            ResultSet resultSet = null;
         
		try {
                    DataSource ds = new DataSource();
                    con = ds.createConnection();
                    pstmt = con.prepareStatement(
		"SELECT * FROM Recipients");
                    resultSet = pstmt.executeQuery();
                    var metaData = resultSet.getMetaData();
                    int numberOfColumns = metaData.getColumnCount();     
                  
                    for ( int i = 1; i <= numberOfColumns; i++ ) {
                       System.out.printf( "%-9s\t", metaData.getColumnName(i) );
                       System.out.printf( "%-9s\t", metaData.getColumnTypeName(i) );
                       System.out.printf( "%-9s\t", metaData.getColumnClassName(i) );
                       System.out.printf("\n");
                    }
                }
      		catch(SQLException e){
		}
		finally{
			try{ if(resultSet != null){ resultSet.close(); } }
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
        }
}